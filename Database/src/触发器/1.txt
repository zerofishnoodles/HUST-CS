--创建触发器函数TRI_INSERT_FUNC()
CREATE OR REPLACE FUNCTION TRI_INSERT_FUNC() RETURNS TRIGGER AS
$$
DECLARE
   --此处用declare语句声明你所需要的变量
   DECLARE msg VARCHAR(128);
BEGIN
   --此处插入触发器业务
   IF NEW.pro_type = 1
   THEN 
      IF NOT exists(
         select *
         from finances_product
         WHERE NEW.pro_pif_id=p_id
      )
      THEN
         msg := CONCAT('finances product #', NEW.pro_pif_id, ' not found!');
         raise exception '%',msg;
      END IF;
   ELSEIF NEW.pro_type = 2
   THEN
      IF NOT exists(
         select *
         from insurance
         WHERE NEW.pro_pif_id=i_id
      )
      THEN
         msg := CONCAT('insurance #', NEW.pro_pif_id, ' not found!');
         raise exception '%',msg;
      END IF;
   ELSEIF NEW.pro_type = 3
   THEN
      IF NOT exists(
         select *
         from fund
         WHERE NEW.pro_pif_id=f_id
      )
      THEN
         msg := CONCAT('fund #',NEW.pro_pif_id, ' not found!');
         raise exception '%',msg;
      END IF;
   ELSE
      msg := CONCAT('type ', NEW.pro_type, ' is illegal!');
      raise exception '%',msg;
   END IF;
   --触发器业务结束
   return new;--返回插入的新元组
END;
$$ LANGUAGE PLPGSQL;


-- 创建before_property_inserted触发器，使用函数TRI_INSERT_FUNC实现触发器逻辑：
CREATE  TRIGGER before_property_inserted BEFORE INSERT ON property
FOR EACH ROW 
EXECUTE PROCEDURE TRI_INSERT_FUNC();

















